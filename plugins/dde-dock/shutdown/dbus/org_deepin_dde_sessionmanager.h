// SPDX-FileCopyrightText: 2024 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: LGPL-3.0-or-later

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Source file was org.deepin.dde.SessionManager.xml
 *
 * qdbusxml2cpp is Copyright (C) The Qt Company Ltd. and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_DEEPIN_DDE_SESSIONMANAGER_H
#define ORG_DEEPIN_DDE_SESSIONMANAGER_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.deepin.dde.SessionManager1
 */
class SessionManager: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.dde.SessionManager1"; }

public:
    SessionManager(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~SessionManager();

    Q_PROPERTY(QDBusObjectPath CurrentSessionPath READ currentSessionPath)
    inline QDBusObjectPath currentSessionPath() const
    { return qvariant_cast< QDBusObjectPath >(property("CurrentSessionPath")); }

    Q_PROPERTY(QString CurrentUid READ currentUid)
    inline QString currentUid() const
    { return qvariant_cast< QString >(property("CurrentUid")); }

    Q_PROPERTY(bool Locked READ locked)
    inline bool locked() const
    { return qvariant_cast< bool >(property("Locked")); }

    Q_PROPERTY(int Stage READ stage)
    inline int stage() const
    { return qvariant_cast< int >(property("Stage")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> AllowSessionDaemonRun()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("AllowSessionDaemonRun"), argumentList);
    }

    inline QDBusPendingReply<bool> CanHibernate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanHibernate"), argumentList);
    }

    inline QDBusPendingReply<bool> CanLogout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanLogout"), argumentList);
    }

    inline QDBusPendingReply<bool> CanReboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanReboot"), argumentList);
    }

    inline QDBusPendingReply<bool> CanShutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanShutdown"), argumentList);
    }

    inline QDBusPendingReply<bool> CanSuspend()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("CanSuspend"), argumentList);
    }

    inline QDBusPendingReply<> ForceLogout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ForceLogout"), argumentList);
    }

    inline QDBusPendingReply<> ForceReboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ForceReboot"), argumentList);
    }

    inline QDBusPendingReply<> ForceShutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ForceShutdown"), argumentList);
    }

    inline QDBusPendingReply<> Logout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Logout"), argumentList);
    }

    inline QDBusPendingReply<> PowerOffChoose()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("PowerOffChoose"), argumentList);
    }

    inline QDBusPendingReply<> Reboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reboot"), argumentList);
    }

    inline QDBusPendingReply<bool> Register(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Register"), argumentList);
    }

    inline QDBusPendingReply<> RequestHibernate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestHibernate"), argumentList);
    }

    inline QDBusPendingReply<> RequestLock()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestLock"), argumentList);
    }

    inline QDBusPendingReply<> RequestLogout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestLogout"), argumentList);
    }

    inline QDBusPendingReply<> RequestReboot()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestReboot"), argumentList);
    }

    inline QDBusPendingReply<> RequestShutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestShutdown"), argumentList);
    }

    inline QDBusPendingReply<> RequestSuspend()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("RequestSuspend"), argumentList);
    }

    inline QDBusPendingReply<> SetLocked(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetLocked"), argumentList);
    }

    inline QDBusPendingReply<> Shutdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Shutdown"), argumentList);
    }

    inline QDBusPendingReply<> ToggleDebug()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ToggleDebug"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Unlock();
};

namespace org {
  namespace deepin {
    namespace dde {
      using SessionManager1 = ::SessionManager;
    }
  }
}
#endif
